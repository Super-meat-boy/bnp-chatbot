{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\choko\\\\Projects\\\\bnp chatbot\\\\src\\\\components\\\\chatbot\\\\BnpChatbot.js\";\nimport React from \"react\";\nimport ChatBot from \"react-simple-chatbot\";\nimport moment from \"moment\";\n\nfunction checkDateValidity(value) {\n  const dateEntered = value;\n\n  if (moment(dateEntered, \"DD.MM.YYYY\", true).isValid() && moment(dateEntered, \"DD.MM.YYYY\", true) < moment.now()) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nclass BnpChatbot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      gender: '',\n      age: ''\n    };\n  }\n\n  componentWillMount() {\n    const steps = this.props.steps;\n    const name = steps.name,\n          gender = steps.gender,\n          age = steps.age;\n    this.setState({\n      name,\n      gender,\n      age\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          name = _this$state.name,\n          gender = _this$state.gender,\n          age = _this$state.age;\n    const config = {\n      width: \"300px\",\n      height: \"400px\",\n      floating: true\n    };\n    const steps = [{\n      id: \"Greet\",\n      message: \"Hello, Welcome to our BNP Chatbot\",\n      trigger: \"Ask Gender\"\n    }, {\n      id: \"Ask Gender\",\n      message: \"Vous-êtes un homme ou une femme ?\",\n      trigger: \"gender\"\n    }, {\n      id: \"gender\",\n      options: [{\n        value: \"Homme\",\n        label: \"Homme\",\n        trigger: \"Ask Name\"\n      }, {\n        value: \"Femme\",\n        label: \"Femme\",\n        trigger: \"Ask Name\"\n      }]\n    }, {\n      id: \"Ask Name\",\n      message: \"Merci, quel est votre prénom\",\n      trigger: \"name\"\n    }, {\n      id: \"name\",\n      user: true,\n      trigger: \"Personalize Greetings\"\n    }, {\n      id: \"Personalize Greetings\",\n      message: \"Enchanté {previousValue}, Joli prénom\",\n      trigger: \"Asking for birthdate\"\n    }, {\n      id: \"Asking for birthdate\",\n      message: \"Quelle est votre date de naissance ? (format dd.mm.yyyy souhaité)\",\n      trigger: \"Waiting for birthdate input\"\n    }, {\n      id: \"Waiting for birthdate input\",\n      user: true,\n      validator: value => {\n        if (checkDateValidity(value)) {\n          console.log('valid date');\n          return true;\n        }\n\n        console.log('not valid date');\n        return 'Date invalide';\n      },\n      trigger: 'Done'\n    }, {\n      id: 'Done',\n      component: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \" Merci \", this.state.name),\n      end: true\n    }];\n    return React.createElement(ChatBot, Object.assign({\n      steps: steps\n    }, config, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BnpChatbot;","map":{"version":3,"sources":["C:\\Users\\choko\\Projects\\bnp chatbot\\src\\components\\chatbot\\BnpChatbot.js"],"names":["React","ChatBot","moment","checkDateValidity","value","dateEntered","isValid","now","BnpChatbot","Component","constructor","props","state","name","gender","age","componentWillMount","steps","setState","render","config","width","height","floating","id","message","trigger","options","label","user","validator","console","log","component","end"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ChatBot from \"react-simple-chatbot\";\r\nimport moment from \"moment\";\r\n\r\nfunction checkDateValidity(value) {\r\n    const dateEntered = value;\r\n    if (moment(dateEntered, \"DD.MM.YYYY\", true).isValid() && (moment(dateEntered, \"DD.MM.YYYY\", true) < moment.now())) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nclass BnpChatbot extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: '',\r\n            gender: '',\r\n            age: '',\r\n        };\r\n    }\r\n    componentWillMount() {\r\n        const {steps} = this.props;\r\n        const {name, gender, age} = steps;\r\n\r\n        this.setState({name, gender, age});\r\n    }\r\n\r\n    render() {\r\n        const {name, gender, age} = this.state;\r\n\r\n        const config = {\r\n            width: \"300px\",\r\n            height: \"400px\",\r\n            floating: true\r\n        };\r\n\r\n\r\n        const steps = [\r\n            {\r\n                id: \"Greet\",\r\n                message: \"Hello, Welcome to our BNP Chatbot\",\r\n                trigger: \"Ask Gender\"\r\n            },\r\n            {\r\n                id: \"Ask Gender\",\r\n                message: \"Vous-êtes un homme ou une femme ?\",\r\n                trigger: \"gender\"\r\n            },\r\n            {\r\n                id: \"gender\",\r\n                options: [\r\n                    {value: \"Homme\", label: \"Homme\", trigger: \"Ask Name\"},\r\n                    {value: \"Femme\", label: \"Femme\", trigger: \"Ask Name\"}\r\n                ]\r\n            },\r\n            {\r\n                id: \"Ask Name\",\r\n                message: \"Merci, quel est votre prénom\",\r\n                trigger: \"name\"\r\n            },\r\n            {\r\n                id: \"name\",\r\n                user: true,\r\n                trigger: \"Personalize Greetings\"\r\n            },\r\n            {\r\n                id: \"Personalize Greetings\",\r\n                message: \"Enchanté {previousValue}, Joli prénom\",\r\n                trigger: \"Asking for birthdate\"\r\n            },\r\n            {\r\n                id: \"Asking for birthdate\",\r\n                message: \"Quelle est votre date de naissance ? (format dd.mm.yyyy souhaité)\",\r\n                trigger: \"Waiting for birthdate input\"\r\n            },\r\n\r\n            {\r\n                id: \"Waiting for birthdate input\",\r\n                user: true,\r\n\r\n                validator: (value) => {\r\n                    if (checkDateValidity(value)) {\r\n                        console.log('valid date')\r\n                        return true;\r\n                    }\r\n                    console.log('not valid date');\r\n                    return 'Date invalide';\r\n                },\r\n                trigger: 'Done',\r\n            },\r\n            {\r\n                id: 'Done',\r\n                component: (\r\n                    <div> Merci {this.state.name}</div>\r\n                ),\r\n                end: true,\r\n            }\r\n        ];\r\n        return <ChatBot steps={steps} {...config} />;\r\n    }\r\n}\r\n\r\nexport default BnpChatbot;\r\n"]},"metadata":{},"sourceType":"module"}